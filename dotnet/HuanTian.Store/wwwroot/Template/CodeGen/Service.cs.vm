using Magic.Core;
using Furion.DependencyInjection;
using Furion.DynamicApiController;
using Mapster;
using Microsoft.AspNetCore.Mvc;
using SqlSugar;
using System.Linq;
using System.Threading.Tasks;
using Magic.Application.Entity;
namespace @Model.NameSpace
{
    /// <summary>
    /// @(@Model.BusName)服务
    /// </summary>
    [ApiDescriptionSettings(Name = "@Model.ClassName", Order = 100)]
    public class @(@Model.ClassName)Service : I@(@Model.ClassName)Service, IDynamicApiController, ITransient
    {
        private readonly ISqlSugarRepository<@(@Model.ClassName)> _rep;

        public @(@Model.ClassName)Service(ISqlSugarRepository<@(@Model.ClassName)> rep)
        {
            _rep = rep;
        }

        /// <summary>
        /// 分页查询@(@Model.BusName)
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        [HttpGet("/@Model.ClassName/page")]
        public async Task<dynamic> Page([FromQuery] @(@Model.ClassName)Input input)
        {
@foreach (var column in Model.TableField){
    if (@column.QueryWhether == "Y"){
        if(@column.QueryType == "in"){
            @:var @(@column.ColumnName)Array = (string.IsNullOrWhiteSpace(input.@(@column.ColumnName)) ? "" : input.@(@column.ColumnName)).Split(',');
        }
    }
}
            var entities = await _rep.Context.Queryable<@(@Model.ClassName)>()
                    @foreach (var column in Model.TableField){
                       if (@column.QueryWhether == "Y"){
                           if(@column.QueryType == "like"){
                                      @:.WhereIF(!string.IsNullOrWhiteSpace(input.@column.ColumnName), u => u.@(@column.ColumnName).Contains(input.@(@column.ColumnName).Trim()))
                           }else if(@column.QueryType == "in"){
                                      @:.WhereIF(!string.IsNullOrWhiteSpace(input.@column.ColumnName), u => @(@column.ColumnName)Array.Contains(u.@(@column.ColumnName)))
                           }else{
                              if (@column.NetType == "string"){
                                      @:.WhereIF(!string.IsNullOrWhiteSpace(input.@column.ColumnName), u => u.@(@column.ColumnName) @column.QueryType input.@(@column.ColumnName))
                              }else{
                                      @:.WhereIF(input.@column.ColumnName!=null, u => u.@(@column.ColumnName) @column.QueryType input.@(@column.ColumnName))  
                              }
                           }
                        }
                    }
                                     .OrderBy(u => u.CreatedTime, OrderByType.Desc)
                                     .ToPagedListAsyncCloseFilter(input.PageNo, input.PageSize);
            return entities.XnPagedResult();
        }

        /// <summary>
        /// 增加@(@Model.BusName)
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        [HttpPost("/@Model.ClassName/add")]
        public async Task Add(@(@Model.ClassName)FormInput input)
        {
            var entity = input.Adapt<@(@Model.ClassName)>();
            await _rep.Context.Insertable(entity).IgnoreColumns(ignoreNullColumn: true).CallEntityMethod(m => m.Create()).ExecuteCommandAsync();
        }

        /// <summary>
        /// 更新@(@Model.BusName)
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        [HttpPost("/@Model.ClassName/edit")]
        public async Task Update(@(@Model.ClassName)FormInput input)
        {
            var entity = input.Adapt<@(@Model.ClassName)>();
            await _rep.Context.Updateable(entity).IgnoreColumns(ignoreAllNullColumns:true).CallEntityMethod(m => m.Modify()).ExecuteCommandAsync();
        }

        /// <summary>
        /// 删除@(@Model.BusName)
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        [HttpPost("/@Model.ClassName/delete")]
        public async Task Delete(IdInput input)
        {
           await _rep.Context.Updateable(new @(@Model.ClassName)() { IsDeleted = true }).UpdateColumns(it => new { it.IsDeleted }).Where(it => it.Id == input.Id).ExecuteCommandAsync();
        }

        /// <summary>
        /// 获取@(@Model.BusName)
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        [HttpGet("/@Model.ClassName/detail")]
        public async Task<@(@Model.ClassName)> Get([FromQuery] IdInput input)
        {
@foreach (var column in Model.TableField){
if (@column.ColumnKey == "True"){
            @:return await _rep.FirstOrDefaultAsync(u => u.@(@column.ColumnName) == input.@(@column.ColumnName));
}
}            
        }

        /// <summary>
        /// 获取@(@Model.BusName)列表
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        [HttpGet("/@Model.ClassName/list")]
        public async Task<dynamic> List([FromQuery] @(@Model.ClassName)Input input)
        {
            return await _rep.ToListAsync();
        }

        /// <summary>
        /// 获取@(@Model.BusName)外键列表
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        [HttpGet("/@Model.ClassName/fkList")]
        public async Task<dynamic> FkList([FromQuery] Fk@(@Model.ClassName)Input input)
        {
            return await _rep.Context.Queryable<@(@Model.ClassName)>()
                @foreach (var column in Model.TableField){
                    if (@column.FkQueryWhether == "Y"){
                        if (@column.NetType == "string" && @column.QueryType == "like"){
                             if(@column.QueryType == "like"){
                             @:.WhereIF(!string.IsNullOrWhiteSpace(input.@column.ColumnName), u => u.@(@column.ColumnName).Contains(input.@(@column.ColumnName).Trim()))
                             }else{
                             @:.WhereIF(!string.IsNullOrWhiteSpace(input.@column.ColumnName), u => u.@(@column.ColumnName) @column.QueryType input.@(@column.ColumnName))
                             }
                        }else{
                             @:.WhereIF(input.@column.ColumnName!=null, u => u.@(@column.ColumnName) @column.QueryType input.@(@column.ColumnName))  
                        }
                    }
                }
                            .OrderBy(u => u.CreatedTime,OrderByType.Desc)
                            .Select(u => new
                            {
                                code = u.Id,
                                value = u.Title
                            }).ToListAsync();
        }
    }
}
